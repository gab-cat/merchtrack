generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  clerkId        String    @unique
  firstName      String?   @default("nan")
  lastName       String?   @default("nan")
  managerId      String?
  email          String    @unique
  phone          String    @unique @default("nan")
  courses        String    @default("nan")
  isStaff        Boolean   @default(false)
  isAdmin        Boolean   @default(false)
  isSetupDone    Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  role           Role      @default(STUDENT)
  college        College   @default(NOT_APPLICABLE)

  listedProducts    Product[]
  
  User              User[] @relation("ManagerToStaff")
  manager           User? @relation("ManagerToStaff", fields: [managerId], references: [id])

  orders            Order[]   @relation("OrderToUser")
  processedOrders   Order[]   @relation("OrderToProcessor")

  payments          Payment[] @relation("PaymentToUser")
  processedPayments Payment[] @relation("PaymentToProcessor")

  logs              Log[] @relation("LogToUser")
  createdLogs       Log[] @relation("LogToCreator")
  fulfillment       Fulfillment[] 

  
}

model Product {
  /// Primary key
  id            String        @id @default(cuid())
  categoryId    String?
  postedById    String
  slug          String        @unique
  title         String
  description   String?
  originalPrice Json?
  currentPrice  Json
  discountLabel String?
  rating        Float         @default(0.0)
  reviewsCount  Int           @default(0)
  imageUrl      String
  imageUrlDark  String?
  isBestPrice   Boolean       @default(false)
  inventory     Int           @default(0)
  inventoryType InventoryType @default(PREORDER)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt


  // Relationships
  category   Category?    @relation(fields: [categoryId], references: [id])
  postedBy   User         @relation(fields: [postedById], references: [id])
  orderItems OrderItem[]  @relation("OrderItemToProduct")
}

model Category {
  /// Primary key
  id          String    @id @default(cuid())
  name        String
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Order {
  id                String      @id @default(cuid())
  customerId        String
  processedById     String?
  orderDate         DateTime    @default(now())
  status            OrderStatus @default(PENDING)
  totalAmount       Float       @default(0)
  discountAmount    Float       @default(0)
  estimatedDelivery DateTime
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  fulfillmentid     String?
  customerSatisfactionSurveyid String?

  // Relationships
  orderItems                 OrderItem[]   @relation("OrderItemToOrder")
  payments                   Payment[]     @relation("PaymentToOrder")
  customer                   User          @relation("OrderToUser", fields: [customerId], references: [id])
  processedBy                User?        @relation("OrderToProcessor", fields: [processedById], references: [id])
  customerSatisfactionSurvey CustomerSatisfactionSurvey? @relation("OrderToSurvey", fields: [customerSatisfactionSurveyid], references: [id])
  fulfillment                Fulfillment? @relation("OrderToFulfillment", fields: [fulfillmentid], references: [id])

  Fulfillment Fulfillment[]
  CustomerSatisfactionSurvey CustomerSatisfactionSurvey[]
}

model OrderItem {
  id           String   @id @default(cuid())
  orderId      String
  productId    String
  quantity     Int
  price        Decimal  @default(0)
  customerNote String?
  size         String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  order   Order   @relation("OrderItemToOrder", fields: [orderId], references: [id])
  product Product @relation("OrderItemToProduct", fields: [productId], references: [id])
}

model Payment {
  id            String         @id @default(cuid())
  orderId       String
  userId        String
  processedById String?
  paymentDate   DateTime       @default(now())
  amount        Decimal        @default(0)
  paymentMethod PaymentMethod  @default(CASH)
  paymentStatus PaymentStatus  @default(PENDING)
  referenceNo   String         @default("")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // Relationships
  order       Order @relation("PaymentToOrder", fields: [orderId], references: [id])
  user        User  @relation("PaymentToUser", fields: [userId], references: [id])
  processedBy User? @relation("PaymentToProcessor", fields: [processedById], references: [id])
}

model Fulfillment {
  id              String           @id @default(cuid())
  orderId         String           @unique
  fulfillmentDate DateTime         @default(now())
  processedById   String?
  status          FulfillmentStatus @default(PENDING)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relationships
  order       Order @relation(fields: [orderId], references: [id])
  processedBy User? @relation(fields: [processedById], references: [id])

  Order Order[] @relation("OrderToFulfillment")
}

model Log {
  id          String   @id @default(cuid())
  userId      String?
  createdDate DateTime @default(now())
  createdById String?
  reason      String
  systemText  String
  userText    String

  // Relationships
  user      User? @relation("LogToUser", fields: [userId], references: [id])
  createdBy User? @relation("LogToCreator", fields: [createdById], references: [id])
}

model CustomerSatisfactionSurvey {
  /// Primary key
  id         String   @id @default(cuid())
  orderId    String   @unique
  submitDate DateTime @default(now())
  question1  Int
  question2  Int
  question3  Int
  question4  Int
  comments   String?
  categoryId String

  // Relationship
  order Order @relation(fields: [orderId], references: [id])
  category SurveyCategory @relation(fields: [categoryId], references: [id])

  Order Order[] @relation("OrderToSurvey")
}

model SurveyCategory {
  id        String   @id @default(cuid())
  name      String
  question1 String
  question2 String
  question3 String
  question4 String
  surveys   CustomerSatisfactionSurvey[]
}

enum InventoryType {
  PREORDER
  STOCK
}

enum Role {
  STUDENT
  STAFF_FACULTY
  ALUMNI
  OTHERS
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
  MOBILE_PAYMENT
  ONLINE_PAYMENT
}

enum PaymentStatus {
  VERIFIED
  PENDING
  DECLINED
}

enum PaymentType {
  PAYMENT
  REFUND
}

enum FulfillmentStatus {
  PENDING
  PRODUCTION
  READY
  COMPLETED
  CANCELLED
}

enum College {
  NOT_APPLICABLE
  COCS
  STEP
  ABBS
  JPIA
  ACHSS
  ANSA
  COL
  AXI
}