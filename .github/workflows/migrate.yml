name: 5. MIGRATION - Database Migration

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  migrate-database:
    runs-on: ubuntu-latest
    environment: Migration
    permissions:
      contents: write
      pull-requests: write
      checks: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install PostgreSQL Client Tools
        run: |
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo apt-get update
          sudo apt-get install -y postgresql-client-17

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Open Database to Public Network
        run: |
          if [ "${{ github.event.inputs.environment }}" == "production" ]; then
            aws lightsail update-relational-database \
              --relational-database-name merchtrack-db-sgp1 \
              --publicly-accessible
          else
            aws lightsail update-relational-database \
              --relational-database-name merchtrack-db-sgp1 \
              --publicly-accessible
          fi

      - name: Backup Database before migration
        run: |
          if [ "${{ github.event.inputs.environment }}" == "production" ]; then
            pg_dump ${{ secrets.PRODUCTION }} > backup.sql
          else
            pg_dump ${{ secrets.STAGING }} > backup.sql
          fi

      - name: Upload Database Backup
        uses: actions/upload-artifact@v4
        with:
          name: database-backup
          path: backup.sql

      - name: Run Database Migration
        run: |
          pnpm prisma migrate deploy

      - name: Close Database to Public Network
        run: |
          if [ "${{ github.event.inputs.environment }}" == "production" ]; then
            aws lightsail update-relational-database \
              --relational-database-name merchtrack-db-sgp1 \
              --no-publicly-accessible
          else
            aws lightsail update-relational-database \
              --relational-database-name merchtrack-db-sgp1 \
              --no-publicly-accessible
          fi
